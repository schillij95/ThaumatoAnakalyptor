from deap import base, creator, tools, algorithms
import random
from multiprocessing import Pool, RawArray
import time
import numpy as np
from tqdm import tqdm
import multiprocessing

import sys
### C++ speed up. not yet fully implemented
sys.path.append('ThaumatoAnakalyptor/sheet_generation/build')
import sheet_generation

# Problem parameters
NUM_ITEMS = 10000  # Assuming you have 10 items
MIN_VALUE, MAX_VALUE = 1, 1000  # Range of values that can be assigned to items

# Genetic Algorithm parameters
POP_SIZE = 500
NUM_GEN = 2

var_dict = {'initial_component': None}

def calculate_fitness_k_factors(graph):
    # sum of k == 0 and sum of k != 0
    assert np.sum(graph[:, 3] <= 0) == 0, "There should be no edges with k == 0"
    graph_mask = graph[:, 2] == 0
    k_0 = np.sum(graph[graph_mask, 3])
    k_not_0 = np.sum(graph[~graph_mask, 3])
    factor_0 = 1.00
    factor_not_0 = k_0 / k_not_0
    print(f"Factor 0: {factor_0}, Factor not 0: {factor_not_0} with k_0: {k_0} and k_not_0: {k_not_0}")
    print(f"Maximum possible fitness: {2*k_0}")

    return factor_0, factor_not_0

def init_worker(graph, graph_shape, factor_0, factor_not_0, initial_component, initial_component_shape):
    # Using a dictionary is not strictly necessary. You can also
    # use global variables.
    var_dict['graph'] = graph
    var_dict['graph_shape'] = graph_shape
    var_dict['factor_0'] = factor_0
    var_dict['factor_not_0'] = factor_not_0
    var_dict['initial_component'] = initial_component
    var_dict['initial_component_shape'] = initial_component_shape

def check_valid(component, node1, node2, k):
    k_node1 = component[node1]
    k_node2 = component[node2]
    return k_node1 + k == k_node2

def merge_components(component1, component2, node1, node2, k):
    k1_node1 = component1[node1]
    k2_node2 = component2[node2]
    k_diff = k1_node1 + k - k2_node2
    for component2_key in component2.keys():
        component1[component2_key] = component2[component2_key] + k_diff

def add_node_to_component(component, node1, node2, k):
    k_node1 = component[node1]
    k_node2 = k_node1 + k
    component[node2] = k_node2

def build_graph_from_individual(individual, graph_raw, factor_0, factor_not_0, return_valid_mask=False, initial_component=None):
    # Build a valid graph based on the weights for each edge represented by the individual
    # Sort the edges based on the weights
    sorted_edges_indices = np.argsort(individual)
    # Initialize the graph
    graph_components = []
    if initial_component is not None:
        graph_components.append(initial_component)
    valid_edges_count = 0

    if return_valid_mask:
        valid_mask = np.ones(len(sorted_edges_indices), dtype=bool)

    for edge_index in sorted_edges_indices:
        edge = graph_raw[edge_index]
        node1, node2, k, certainty = edge
        # Check if the nodes are already in the graph
        node1_component, node2_component = None, None
        for i, component in enumerate(graph_components):
            if node1 in component:
                node1_component = (component, i)
            if node2 in component:
                node2_component = (component, i)
            if node1_component is not None and node2_component is not None:
                break
        # Calculate first part of fitness, subject to change in checks
        k_factor = factor_0 if k == 0 else factor_not_0

        score_edge = k_factor * certainty
        valid_edges_count += score_edge
        # If both nodes are not in the graph, add a new component
        if node1_component is None and node2_component is None:
            new_component = {node1: 0, node2: k}
            graph_components.append(new_component)
        # If one node is in a component, add the other node to the component
        elif (node1_component is not None) and (node2_component is None):
            add_node_to_component(node1_component[0], node1, node2, k)
        elif (node2_component is not None) and (node1_component is None):
            add_node_to_component(node2_component[0], node2, node1, -k)
        # If both nodes are in the same component, check if the edge is valid
        elif node1_component[1] == node2_component[1]:
            if not check_valid(node1_component[0], node1, node2, k):
                valid_edges_count -= score_edge # Remove the bad edge from the positive score
                if return_valid_mask:
                    valid_mask[edge_index] = False
        # If both nodes are in different components, merge the components
        elif node1_component is not None and node2_component is not None:
            merge_components(node1_component[0], node2_component[0], node1, node2, k)
            # Remove the second component
            graph_components.pop(node2_component[1])
        # Error case
        else:
            print("Error: This case should not happen")
            raise ValueError("Invalid graph")
        
    if return_valid_mask:
        return valid_mask, valid_edges_count
    else:
        return valid_edges_count

def build_graph_from_individual_patch(individual, graph_raw, factor_0, factor_not_0, return_valid_mask=False):
    # Build a valid graph based on the weights for each edge represented by the individual. Every subvolume (node) can only be containing one patch
    # Sort the edges based on the weights
    sorted_edges_indices = np.argsort(individual)
    # Initialize the graph
    graph_components = []
    valid_edges_count = 0
    visited_subvolumes_set = set()

    if return_valid_mask:
        valid_mask = np.ones(len(sorted_edges_indices), dtype=bool)

    for edge_index in sorted_edges_indices:
        edge = graph_raw[edge_index]
        node1, node2, k, certainty, node1_subvolume_0, node1_subvolume_1, node1_subvolume_2, node2_subvolume_0, node2_subvolume_1, node2_subvolume_2, assigned_k1, assigned_k2 = edge
        node1_subvolume = (node1_subvolume_0, node1_subvolume_1, node1_subvolume_2)
        node2_subvolume = (node2_subvolume_0, node2_subvolume_1, node2_subvolume_2)
        # Check if the nodes are already in the graph
        node1_component, node2_component = None, None
        for i, component in enumerate(graph_components):
            if node1 in component:
                node1_component = (component, i)
            if node2 in component:
                node2_component = (component, i)
            if node1_component is not None and node2_component is not None:
                break

        # Check for visited subvolume vs found components
        if ((node1_subvolume, assigned_k1) in visited_subvolumes_set) and (node1_component is None):
            if return_valid_mask:
                    valid_mask[edge_index] = False
            continue
        elif ((node2_subvolume, assigned_k2) in visited_subvolumes_set) and (node2_component is None):
            if return_valid_mask:
                    valid_mask[edge_index] = False
            continue
        else:
            visited_subvolumes_set.add((node1_subvolume, assigned_k1))
            visited_subvolumes_set.add((node2_subvolume, assigned_k2))

        # Calculate first part of fitness, subject to change in checks
        k_factor = factor_0 if k == 0 else factor_not_0

        score_edge = k_factor * certainty
        valid_edges_count += score_edge
        # If both nodes are not in the graph, add a new component
        if node1_component is None and node2_component is None:
            new_component = {node1: 0, node2: k}
            graph_components.append(new_component)
        # If one node is in a component, add the other node to the component
        elif (node1_component is not None) and (node2_component is None):
            add_node_to_component(node1_component[0], node1, node2, k)
        elif (node2_component is not None) and (node1_component is None):
            add_node_to_component(node2_component[0], node2, node1, -k)
        # If both nodes are in the same component, check if the edge is valid
        elif node1_component[1] == node2_component[1]:
            if not check_valid(node1_component[0], node1, node2, k):
                valid_edges_count -= score_edge # Remove the bad edge from the positive score
                if return_valid_mask:
                    valid_mask[edge_index] = False
        # If both nodes are in different components, merge the components
        elif node1_component is not None and node2_component is not None:
            merge_components(node1_component[0], node2_component[0], node1, node2, k)
            # Remove the second component
            graph_components.pop(node2_component[1])
        # Error case
        else:
            print("Error: This case should not happen")
            raise ValueError("Invalid graph")
        
    if return_valid_mask:
        return valid_mask, valid_edges_count
    else:
        return valid_edges_count
    
def evalItemsPatchSelection(individual):
    individual = np.array(individual).astype(np.int32)
    graph_raw = np.frombuffer(var_dict['graph'], dtype=np.int32).reshape(var_dict['graph_shape'])
    # valid_edges_count = build_graph_from_individual_patch(individual, graph_raw, var_dict['factor_0'], var_dict['factor_not_0'], return_valid_mask=False)
    unused_valid_mask_cpp_array, valid_edges_count = sheet_generation.build_graph_from_individual_patch_cpp(int(individual.shape[0]), individual, int(graph_raw.shape[0]), graph_raw, var_dict['factor_0'], var_dict['factor_not_0'], False)
    del unused_valid_mask_cpp_array
    return (valid_edges_count,)

# Define the fitness function
def evalItems(individual):
    individual = np.array(individual).astype(np.int32)
    # Implement your evaluation logic here
    # For example, sum of all values (just a placeholder)
    graph_raw = np.frombuffer(var_dict['graph'], dtype=np.int32).reshape(var_dict['graph_shape'])
    initial_component = np.frombuffer(var_dict['initial_component'], dtype=np.int32).reshape(var_dict['initial_component_shape'])
    unused_cpp_array, valid_edges_count = sheet_generation.build_graph_from_individual_cpp(int(individual.shape[0]), individual, int(graph_raw.shape[0]), 
    graph_raw, var_dict['factor_0'], var_dict['factor_not_0'], int(initial_component.shape[0]), initial_component, False)
    del unused_cpp_array
    # valid_edges_count_gt = build_graph_from_individual(individual, graph_raw, var_dict['factor_0'], var_dict['factor_not_0'], initial_component)
    # if abs(valid_edges_count - valid_edges_count_gt) > 1e-5:
    #     print(f"Valid edges count: {valid_edges_count}, Valid edges count GT: {valid_edges_count_gt}")
    #     raise ValueError("Invalid graph")
    return (valid_edges_count,)

def init(num_items, problem='k_assignment'):
    # Set up the environment
    creator.create("FitnessMax", base.Fitness, weights=(1.0,))
    creator.create("Individual", list, fitness=creator.FitnessMax)

    toolbox = base.Toolbox()
    # toolbox.register("map", pool.map)  # Use pool.map as the map function
    toolbox.register("attr_int", random.randint, MIN_VALUE, MAX_VALUE)
    toolbox.register("individual", tools.initRepeat, creator.Individual,
                    toolbox.attr_int, n=num_items)
    toolbox.register("population", tools.initRepeat, list, toolbox.individual)

    if problem == 'k_assignment':
        toolbox.register("evaluate", evalItems)
    elif problem == 'patch_selection':
        toolbox.register("evaluate", evalItemsPatchSelection)
    else:
        raise ValueError("Invalid problem type")
    toolbox.register("mate", tools.cxTwoPoint)
    toolbox.register("mutate", tools.mutUniformInt, low=MIN_VALUE, up=MAX_VALUE, indpb=0.1)
    toolbox.register("select", tools.selTournament, tournsize=3)


    # Initialize population
    pop = toolbox.population(n=POP_SIZE)
    return toolbox, pop

def run(toolbox, pop):
    # Run the algorithm
    hof = tools.HallOfFame(1)
    stats = tools.Statistics(lambda ind: ind.fitness.values)
    stats.register("avg", np.mean)
    stats.register("min", np.min)
    stats.register("max", np.max)
    result, log = algorithms.eaSimple(pop, toolbox, cxpb=0.5, mutpb=0.2, ngen=NUM_GEN,
                                 stats=stats, halloffame=hof, verbose=True)
    return hof

def solve_(graph_edges, initial_component=None, problem='k_assignment'):
    # Setup
    factor_0, factor_not_0 = calculate_fitness_k_factors(graph_edges)
    var_dict['factor_0'] = factor_0
    var_dict['factor_not_0'] = factor_not_0
    var_dict['initial_component'] = initial_component

    if problem == 'k_assignment':
        return solve_k_assignment_(graph_edges, initial_component)
    elif problem == 'patch_selection':
        return solve_path_selection_(graph_edges)
    else:
        raise ValueError("Invalid problem type")

def solve_path_selection_(graph_edges):
    best_individual = [652, 946, 928, 414, 136, 270, 746, 316, 506, 390, 263, 673, 211, 74, 815, 245, 504, 144, 97, 93, 61, 906, 234, 853, 848, 388, 744, 500, 90, 517, 88, 409, 124, 483, 591, 714, 865, 379, 238, 983, 609, 527, 37, 768, 507, 750, 932, 751, 387, 990, 460, 507, 608, 835, 128, 883, 657, 443, 355, 100, 824, 642, 984, 599, 806, 582, 58, 399, 479, 817, 718, 31, 105, 657, 280, 272, 460, 875, 196, 636, 888, 401, 552, 509, 279, 695, 851, 581, 132, 241, 82, 23, 133, 105, 505, 186, 881, 393, 572, 160, 14, 681, 180, 938, 36, 611, 897, 510, 398, 702, 450, 28, 46, 585, 374, 340, 293, 852, 234, 327, 713, 218, 776, 991, 50, 739, 665, 490, 561, 497, 830, 148, 709, 215, 402, 545, 294, 951, 775, 143, 140, 780, 163, 617, 356, 575, 537, 156, 956, 375, 963, 384, 378, 912, 1000, 63, 595, 830, 648, 393, 11, 843, 867, 269, 256, 198, 988, 113, 599, 109, 847, 403, 667, 416, 921, 44, 975, 547, 5, 430, 201, 622, 266, 230, 835, 882, 11, 204, 597, 170, 200, 874, 67, 842, 281, 230, 200, 152, 869, 756, 973, 910, 530, 159, 66, 935, 822, 893, 728, 485, 327, 61, 781, 457, 76, 467, 985, 800, 29, 821, 152, 855, 167, 648, 654, 428, 58, 944, 981, 216, 245, 806, 992, 240, 794, 469, 445, 355, 953, 637, 503, 356, 162, 270, 108, 540, 783, 396, 370, 34, 970, 607, 182, 666, 827, 444, 813, 112, 50, 21, 235, 512, 228, 968, 672, 105, 925, 113, 94, 935, 370, 963, 214, 623, 506, 424, 661, 937, 163, 163, 188, 294, 402, 649, 224, 980, 139, 990, 342, 276, 633, 27, 493, 857, 261, 951, 834, 214, 975, 725, 66, 418, 734, 724, 985, 144, 373, 95, 159, 328, 965, 144, 434, 782, 99, 921, 389, 587, 121, 128, 53, 819, 420, 721, 774, 840, 123, 479, 111, 521, 468, 98, 1, 402, 973, 265, 576, 465, 394, 18, 124, 215, 626, 709, 253, 520, 795, 176, 352, 801, 98, 479, 535, 611, 321, 320, 434, 167, 452, 41, 249, 142, 864, 247, 550, 989, 734, 957, 846, 645, 212, 431, 854, 394, 926, 481, 790, 448, 529, 530, 760, 862, 608, 6, 342, 959, 153, 614, 779, 674, 428, 151, 669, 966, 650, 56, 315, 669, 693, 512, 840, 266, 429, 147, 981, 595, 741, 567, 633, 307, 682, 34, 707, 960, 534, 579, 311, 328, 305, 41, 311, 475, 542, 189, 556, 770, 909, 844, 188, 28, 369, 638, 933, 658, 551, 612, 47, 962, 158, 175, 99, 754, 368, 109, 575, 804, 881, 559, 147, 619, 965, 612, 9, 748, 969, 821, 394, 568, 43, 770, 749, 436, 47, 405, 376, 780, 789, 646, 784, 622, 610, 237, 222, 517, 99, 47, 229, 329, 779, 54, 521, 872, 673, 285, 690, 575, 822, 567, 560, 317, 318, 600, 357, 823, 720, 308, 683, 586, 920, 823, 5, 869, 448, 278, 25, 661, 818, 400, 116, 379, 206, 412, 662, 696, 850, 224, 284, 514, 566, 460, 858, 146, 929, 888, 576, 495, 509, 565, 594, 366, 707, 875, 846, 355, 373, 990, 208, 361, 205, 377, 870, 545, 776, 155, 289, 241, 656, 364, 817, 243, 591, 40, 513, 159, 188, 372, 587, 180, 482, 25, 204, 731, 338, 143, 799, 948, 235, 298, 748, 445, 611, 555, 787, 699, 949, 248, 345, 886, 955, 5, 66, 989, 744, 304, 895, 328, 113, 209, 636, 865, 717, 990, 611, 508, 571, 604, 968, 929, 371, 607, 890, 209, 52, 921, 412, 298, 898, 915, 328, 213, 918, 338, 550, 983, 367, 172, 396, 912, 705, 310, 814, 127, 66, 376, 343, 439, 637, 573, 552, 450, 358, 677, 497, 160, 190, 37, 724, 187, 399, 923, 467, 290, 192, 925, 177, 598, 805, 909, 896, 20, 312, 743, 392, 112, 383, 338, 380, 109, 312, 600, 307, 909, 464, 403, 717, 508, 230, 892, 622, 207, 638, 803, 951, 270, 208, 809, 338, 900, 10, 616, 372, 614, 634, 357, 966, 477, 927, 194, 627, 14, 254, 81, 748, 341, 217, 828, 149, 934, 127, 283, 116, 71, 654, 604, 136, 795, 657, 757, 249, 58, 527, 733, 929, 630, 551, 616, 133, 436, 128, 867, 498, 409, 665, 325, 469, 561, 967, 88, 762, 494, 433, 45, 677, 402, 438, 712, 288, 846, 267, 917, 259, 217, 347, 838, 866, 761, 228, 477, 120, 51, 3, 70, 616, 412, 465, 331, 430, 254, 185, 250, 661, 894, 706, 600, 307, 787, 249, 327, 842, 958, 240, 114, 195, 287, 646, 103, 438, 280, 889, 853, 616, 67, 654, 109, 181, 488, 567, 653, 918, 954, 995, 202, 305, 242, 680, 58, 811, 835, 991, 222, 186, 283, 301, 207, 863, 442, 104, 980, 507, 262, 719, 944, 472, 656, 787, 312, 379, 533, 597, 439, 349, 207, 491, 196, 625, 421, 759, 607, 454, 459, 440, 783, 881, 397, 328, 471, 279, 543, 75, 769, 64, 376, 740, 534, 235, 802, 857, 865, 539, 156, 809, 534, 588, 452, 90, 524, 481, 325, 508, 161, 273, 659, 841, 155, 554, 285, 490, 574, 819, 472, 142, 118, 962, 352, 219, 365, 625, 318, 706, 52, 433, 22, 693, 526, 221, 567, 467, 580, 361, 90, 445, 537, 276, 284, 520, 840, 970, 807, 1, 803, 794, 845, 793, 850, 814, 614, 660, 225, 889, 115, 578, 276, 236, 267, 125, 262, 911, 588, 435, 739, 550, 295, 148, 118, 489, 195, 334, 803, 760, 421, 327, 123, 960, 962, 221, 784, 743, 946, 113, 217, 165, 99, 526, 12, 299, 294, 726, 52, 754, 902, 315, 337, 756, 237, 173, 121, 82, 689, 584, 417, 80, 537, 715, 868, 405, 871, 886, 419, 941, 112, 924, 925, 921, 558, 285, 450, 611, 551, 130, 855, 512, 781, 449, 346, 155, 331, 782, 359, 524, 634, 580, 502, 572, 856, 904, 382, 801, 381, 403, 185, 233, 357, 384, 159, 491, 772, 606, 635, 961, 719, 477, 312, 998, 833, 173, 710, 318, 422, 953, 161, 10, 332, 566, 961, 179, 403, 960, 376, 243, 749, 577, 785, 892, 371, 568, 852, 187, 864, 156, 118, 396, 382, 272, 650, 639, 136, 785, 981, 529, 968, 910, 488, 48, 797, 837, 586, 112, 749, 745, 330, 607, 916, 518, 122, 61, 39, 83, 384, 31, 432, 403, 762, 75, 724, 4, 964, 454, 849, 836, 187, 328, 891, 784, 238, 934, 577, 23, 562, 6, 681, 130, 316, 309, 239, 771, 61, 891, 519, 657, 727, 789, 584, 760, 622, 322, 599, 705, 900, 592, 995, 99, 570, 102, 913, 145, 871, 193, 400, 843, 754, 657, 815, 576, 511, 811, 681, 866, 835, 921, 73, 980, 622, 356, 39, 49, 570, 930, 112, 49, 594, 982, 597, 275, 197, 426, 655, 590, 639, 954, 491, 799, 308, 549, 865, 404, 817, 799, 790, 912, 144, 954, 6, 484, 810, 197, 86, 992, 78, 34, 652, 94, 135, 125, 240, 83, 237, 653, 186, 165, 663, 885, 175, 320, 561, 470, 689, 222, 377, 279, 761, 941, 354, 202, 442, 207, 641, 998, 769, 677, 91, 586, 626, 754, 299, 282, 566, 150, 367, 562, 623, 951, 797, 649, 196, 796, 361, 866, 264, 68, 878, 956, 246, 792, 795, 396, 262, 828, 495, 421, 401, 554, 279, 699, 401, 751, 54, 580, 87, 535, 267, 751, 50, 908, 523, 619, 668, 605, 395, 649, 84, 651, 151, 223, 220, 444, 94, 20, 323, 999, 179, 102, 976, 618, 575, 806, 648, 740, 124, 490, 649, 474, 630, 45, 753, 652, 512, 879, 494, 727, 44, 138, 461, 364, 958, 960, 455, 436, 179, 191, 910, 620, 704, 743, 422, 568, 276, 380, 411, 656, 541, 161, 493, 765, 377, 775, 209, 100, 352, 482, 420, 487, 829, 440, 248, 795, 573, 377, 165, 29, 86, 917, 639, 361, 109, 192, 777, 926, 663, 432, 806, 464, 453, 91, 884, 309, 252, 683, 504, 915, 881, 484, 483, 915, 451, 27, 896, 203, 223, 328, 969, 291, 439, 105, 959, 367, 703, 185, 232, 48, 116, 821, 844, 355, 579, 982, 117, 194, 488, 286, 605, 646, 477, 814, 560, 822, 196, 340, 556, 655, 855, 904, 904, 517, 428, 285, 399, 24, 495, 441, 366, 437, 94, 407, 401, 658, 897, 138, 19, 40, 465, 832, 233, 236, 595, 519, 140, 825, 170, 582, 893, 94, 167, 659, 981, 765, 719, 718, 915, 699, 162, 408, 291, 236, 250, 406, 150, 440, 132, 823, 706, 207, 342, 40, 738, 903, 338, 629, 360, 828, 879, 175, 729, 618, 48, 544, 329, 437, 790, 204, 587, 738, 305, 761, 664, 502, 651, 538, 628, 829, 121, 816, 920, 410, 99, 153, 152, 124, 883, 412, 25, 621, 414, 590, 876, 566, 433, 20, 951, 119, 529, 86, 751, 528, 367, 794, 512, 806, 16, 806, 648, 923, 467, 583, 341, 818, 913, 579, 37, 106, 431, 613, 413, 369, 752, 414, 307, 951, 13, 998, 639, 803, 726, 763, 795, 417, 336, 218, 952, 963, 734, 375, 329, 935, 442, 306, 313, 309, 120, 721, 419, 558, 810, 906, 534, 485, 266, 928, 305, 523, 223, 294, 870, 447, 247, 902, 308, 922, 917, 438, 98, 506, 946, 741, 872, 316, 930, 897, 220, 775, 769, 121, 984, 293, 601, 427, 364, 585, 72, 658, 196, 500, 756, 566, 331, 93, 397, 156, 605, 317, 889, 351, 759, 18, 266, 685, 684, 665, 522, 941, 678, 902, 231, 81, 727, 372, 724, 884, 1, 957, 884, 559, 571, 881, 274, 68, 614, 966, 755, 233, 999, 235, 279, 958, 860, 413, 201, 346, 978, 324, 873, 395, 22, 841, 399, 727, 75, 581, 977, 717, 262, 250, 79, 123, 180, 205, 417, 551, 923, 383, 342, 644, 623, 44, 222, 220, 968, 433, 530, 589, 32, 346, 64, 979, 621, 893, 181, 203, 876, 147, 741, 550, 421, 255, 526, 499, 261, 101, 972, 978, 818, 145, 675, 343, 740, 862, 537, 237, 105, 511, 61, 692, 641, 567, 812, 976, 69, 599, 557, 888, 415, 902, 114, 251, 830, 451, 988, 819, 678, 71, 312, 737, 78, 320, 909, 478, 426, 590, 903, 73, 773, 174, 169, 588, 240, 119, 450, 638, 876, 70, 909, 981, 379, 852, 761, 405, 333, 605, 250, 437, 593, 938, 644, 200, 601, 962, 637, 232, 827, 673, 975, 250, 441, 708, 86, 526, 545, 118, 350, 783, 818, 532, 116, 114, 89, 684, 331, 363, 922, 265, 538, 767, 466, 333, 204, 414, 86, 709, 693, 634, 186, 988, 858, 873, 704, 100, 234, 493, 460, 223, 833, 535, 662, 594, 113, 724, 482, 620, 914, 854, 239, 924, 754, 240, 381, 722, 402, 572, 111, 713, 803, 566, 49, 347, 543, 846, 542, 464, 586, 789, 727, 706, 716, 472, 548, 347, 286, 396, 659, 626, 900, 602, 495, 847, 271, 206, 237, 911, 741, 875, 258, 512, 568, 378, 790, 603, 202, 593, 381, 384, 249, 694, 715, 785, 89, 248, 578, 176, 633, 646, 165, 172, 9, 231, 294, 360, 224, 423, 119, 110, 909, 661, 131, 173, 728, 234, 930, 318, 472, 667, 895, 887, 701, 560, 718, 735, 190, 719, 113, 317, 334, 169, 989, 571, 321, 764, 492, 529, 118, 967, 748, 173, 836, 602, 632, 459, 353, 192, 627, 24, 448, 892, 7, 151, 787, 214, 189, 913, 674, 396, 659, 824, 208, 336, 906, 241, 396, 428, 666, 306, 922, 542, 772, 674, 898, 547, 948, 271, 376, 709, 383, 742, 95, 224, 420, 873, 222, 902, 740, 621, 314, 427, 116, 452, 19, 315, 571, 934, 920, 396, 88, 594, 687, 218, 68, 690, 688, 730, 122, 29, 708, 694, 503, 838, 607, 697, 377, 431, 592, 380, 747, 174, 811, 512, 776, 732, 631, 712, 935, 352, 776, 604, 981, 78, 385, 562, 105, 364, 835, 18, 101, 617, 323, 781, 706, 206, 742, 565, 318, 590, 153, 144, 587, 485, 825, 761, 947, 648, 135, 564, 143, 564, 323, 832, 528, 280, 924, 391, 445, 420, 966, 565, 59, 407, 723, 799, 725, 727, 68, 226, 885, 967, 897, 251, 847, 381, 447, 945, 997, 233, 484, 729, 499, 208, 996, 492, 971, 173, 619, 4, 1, 145, 167, 336, 580, 530, 488, 118, 977, 249, 454, 436, 526, 159, 199, 273, 217, 737, 407, 213, 751, 604, 366, 338, 936, 105, 52, 940, 705, 84, 577, 828, 332, 621, 617, 713, 208, 196, 703, 225, 62, 340, 182, 606, 231, 320, 82, 759, 228, 368, 78, 119, 229, 762, 223, 703, 767, 409, 566, 306, 838, 371, 13, 351, 683, 672, 186, 347, 855, 925, 297, 103, 591, 445, 556, 663, 239, 803, 7, 941, 593, 59, 266, 681, 496, 187, 369, 962, 197, 472, 70, 428, 691, 491, 137, 785, 356, 531, 106, 359, 950, 406, 801, 171, 913, 122, 9, 993, 821, 929, 378, 320, 605, 879, 734, 306, 345, 358, 343, 466, 915, 81, 866, 786, 699, 143, 833, 459, 760, 565, 541, 562, 237, 241, 656, 392, 942, 147, 314, 10, 342, 740, 870, 434, 147, 867, 731, 343, 137, 39, 546, 543, 834, 695, 468, 232, 848, 915, 44, 426, 351, 830, 61, 60, 136, 279, 208, 35, 577, 551, 847, 902, 795, 134, 705, 379, 914, 991, 603, 670, 863, 877, 161, 68, 761, 738, 301, 715, 307, 698, 52, 520, 810, 910, 935, 637, 716, 537, 183, 772, 846, 219, 176, 589, 726, 39, 833, 304, 253, 489, 388, 562, 317, 650, 593, 989, 96, 806, 102, 695, 230, 627, 335, 281, 23, 543, 956, 711, 352, 3, 541, 901, 304, 525, 743, 80, 426, 59, 725, 580, 643, 143, 821, 778, 35, 558, 370, 492, 648, 970, 512, 962, 237, 610, 166, 327, 684, 738, 553, 793, 214, 728, 930, 915, 502, 298, 185, 952, 773, 93, 257, 992, 307, 110, 573, 235, 9, 937, 842, 388, 542, 734, 628, 200, 646, 310, 163, 215, 233, 132, 873, 657, 456, 436, 975, 820, 484, 281, 660, 892, 991, 809, 382, 141, 335, 963, 844, 840, 843, 861, 617, 657, 375, 373, 110, 145, 198, 771, 48, 786, 421, 580, 797, 279, 267, 411, 902, 868, 533, 373, 166, 560, 634, 433, 188, 868, 626, 302, 448, 57, 279, 595, 259, 117, 353, 585, 68, 867, 157, 82, 871, 658, 340, 41, 901, 810, 6, 858, 649, 718, 426, 969, 110, 290, 163, 761, 648, 682, 498, 811, 650, 174, 768, 954, 840, 71, 146, 311, 74, 133, 67, 689, 629, 718, 781, 192, 591, 771, 921, 393, 118, 500, 81, 922, 62, 872, 961, 285, 566, 854, 856, 531, 594, 363, 890, 941, 32, 296, 635, 646, 874, 30, 920, 217, 4, 62, 987, 324, 187, 617, 607, 287, 71, 406, 780, 781, 153, 53, 468, 551, 521, 13, 495, 894, 784, 265, 223, 978, 147, 630, 861, 529, 876, 729, 231, 75, 274, 294, 285, 46, 686, 46, 411, 657, 448, 584, 3, 716, 408, 621, 112, 885, 559, 860, 432, 208, 66, 123, 696, 481, 762, 100, 616, 997, 417, 534, 148, 931, 256, 138, 55, 767, 692, 240, 585, 265, 73, 309, 229, 559, 204, 937, 936, 867, 36, 222, 958, 233, 647, 590, 956, 550, 155, 748, 776, 716, 244, 78, 620, 631, 527, 143, 402, 300, 195, 240, 139, 369, 371, 258, 573, 453, 355, 229, 724, 25, 6, 903, 642, 696, 800, 353, 698, 328, 755, 409, 207, 964, 124, 562, 911, 965, 236, 601, 61, 614, 415, 117, 702, 123, 871, 465, 717, 829, 994, 803, 768, 693, 867, 883, 930, 48, 36, 495, 761, 339, 278, 849, 978, 821, 943, 695, 819, 300, 728, 60, 673, 916, 519, 892, 65, 640, 313, 17, 571, 436, 457, 808, 990, 450, 740, 544, 396, 382, 960, 89, 767, 540, 42, 326, 67, 941, 857, 37, 96, 341, 933, 846, 43, 360, 505, 188, 715, 679, 589, 67, 970, 535, 235, 421, 655, 562, 444, 84, 703, 306, 843, 512, 62, 690, 850, 692, 865, 894, 742, 728, 409, 920, 604, 321, 438, 253, 400, 913, 399, 497, 76, 631, 323, 371, 700, 128, 926, 640, 343, 669, 147, 664, 33, 904, 790, 480, 129, 187, 615, 134, 219, 480, 223, 768, 846, 821, 448, 156, 700, 450, 303, 413, 851, 103, 460, 23, 818, 432, 734, 205, 961, 949, 475, 699, 394, 150, 320, 432, 970, 908, 995, 970, 804, 845, 974, 369, 9, 412, 344, 233, 268, 882, 701, 270, 101, 882, 961, 625, 495, 612, 636, 933, 471, 326, 872, 839, 224, 954, 343, 917, 440, 870, 379, 561, 849, 434, 37, 373, 346, 884, 300, 846, 91, 666, 463, 68, 742, 289, 463, 7, 450, 355, 147, 426, 217, 340, 621, 291, 479, 819, 121, 329, 498, 445, 614, 645, 489, 251, 973, 702, 492, 775, 201, 171, 575, 728, 436, 632, 645, 860, 688, 850, 736, 703, 343, 499, 391, 540, 344, 629, 870, 750, 432, 199, 547, 337, 193, 273, 399, 1, 754, 996, 219, 741, 592, 877, 889, 848, 848, 854, 799, 143, 293, 237, 883, 87, 966, 373, 680, 606, 154, 939, 873, 856, 637, 383, 213, 718, 722, 707, 924, 656, 431, 877, 201, 527, 41, 276, 284, 870, 220, 843, 117, 888, 85, 105, 768, 256, 322, 727, 871, 779, 222, 612, 188, 884, 823, 422, 6, 48, 456, 141, 405, 515, 613, 788, 464, 615, 926, 111, 87, 216, 572, 547, 548, 776, 907, 446, 655, 419, 218, 121, 576, 868, 26, 935, 619, 984, 533, 823, 226, 428, 70, 692, 772, 582, 330, 301, 203, 407, 961, 85, 406, 870, 943, 427, 950, 515, 571, 772, 716, 895, 572, 982, 555, 813, 772, 388, 770, 330, 452, 139, 937, 345, 314, 346, 390, 827, 297, 393, 760, 714, 299, 87, 768, 931, 869, 872, 897, 130, 952, 320, 505, 36, 799, 832, 962, 336, 487, 235, 461, 862, 842, 450, 523, 825, 711, 526, 559, 61, 831, 15, 210, 810, 592, 597, 299, 566, 85, 735, 18, 720, 335, 963, 631, 882, 756, 387, 400, 664, 661, 193, 626, 26, 322, 806, 337, 260, 686, 704, 741, 473, 622, 752, 534, 351, 710, 197, 612, 197, 305, 81, 706, 52, 704, 576, 693, 48, 597, 941, 299, 765, 567, 173, 664, 527, 987, 805, 556, 687, 270, 98, 593, 497, 533, 178, 641, 255, 125, 868, 633, 429, 510, 874, 287, 771, 492, 217, 326, 357, 676, 866, 648, 753, 320, 394, 23, 946, 882, 323, 992, 240, 27, 604, 943, 942, 324, 433, 880, 348, 855, 890, 841, 339, 891, 982, 431, 115, 360, 414, 273, 297, 397, 484, 556, 886, 119, 455, 228, 82, 34, 111, 64, 526, 376, 23, 618, 765, 795, 126, 293, 782, 862, 901, 354, 961, 130, 449, 407, 448, 314, 559, 630, 239, 987, 766, 531, 518, 981, 999, 144, 845, 431, 609, 335, 46, 206, 430, 116, 372, 692, 835, 371, 143, 442, 761, 867, 13, 159, 62, 622, 465, 285, 336, 138, 41, 476, 746, 958, 246, 676, 20, 999, 1, 236, 290, 803, 836, 432, 588, 937, 86, 191, 807, 899, 812, 964, 852, 2, 266, 433, 679, 433, 482, 340, 158, 533, 523, 470, 141, 245, 835, 373, 854, 169, 461, 322, 146, 177, 676, 431, 294, 668, 331, 966, 366, 440, 426, 936, 65, 69, 324, 675, 192, 896, 476, 821, 744, 273, 666, 99, 814, 804, 451, 832, 227, 491, 159, 345, 170, 662, 832, 770, 784, 264, 182, 268, 387, 935, 674, 161, 146, 94, 31, 408, 595, 592, 897, 689, 801, 18, 179, 163, 692, 706, 985, 759, 613, 346, 664, 12, 93, 949, 226, 945, 86, 732, 971, 65, 538, 715, 541, 355, 877, 572, 371, 522, 644, 916, 163, 63, 15, 480, 443, 504, 436, 794, 803, 583, 310, 613, 959, 562, 240, 799, 989, 340, 966, 889, 699, 891, 570, 65, 968, 798, 592, 586, 136, 173, 743, 541, 15, 907, 837, 288, 724, 647, 419, 416, 797, 166, 131, 739, 316, 243, 422, 239, 501]
    
    # valid_mask, valid_edges_count = build_graph_from_individual_patch(best_individual, graph_edges, return_valid_mask=True)
    valid_mask, valid_edges_count = sheet_generation.build_graph_from_individual_patch_cpp(int(best_individual.shape[0]), best_individual, int(graph_edges.shape[0]), graph_edges, var_dict['factor_0'], var_dict['factor_not_0'], True)

    return valid_mask, valid_edges_count

def solve_k_assignment_(graph_edges, initial_component):
    best_individual = [74, 296, 735, 402, 175, 285, 698, 596, 494, 936, 923, 231, 266, 31, 357, 708, 409, 946, 702, 951, 865, 585, 823, 197, 513, 481, 853, 289, 589, 199, 49, 231, 200, 211, 242, 364, 470, 896, 902, 648, 126, 475, 48, 304, 399, 916, 813, 182, 934, 212, 876, 734, 406, 323, 745, 342, 254, 338, 466, 745, 623, 125, 117, 305, 652, 51, 855, 460, 916, 473, 578, 599, 395, 428, 953, 600, 772, 954, 823, 838, 890, 986, 802, 424, 813, 593, 588, 222, 692, 840, 873, 710, 787, 998, 651, 599, 578, 676, 774, 757, 28, 10, 752, 195, 264, 279, 245, 220, 220, 826, 929, 44, 979, 425, 822, 451, 768, 486, 812, 508, 730, 586, 359, 726, 662, 872, 49, 864, 889, 449, 669, 342, 584, 822, 203, 646, 96, 721, 632, 241, 205, 767, 931, 679, 867, 848, 945, 645, 690, 985, 59, 756, 427, 623, 550, 299, 447, 981, 898, 763, 166, 290, 279, 740, 967, 397, 811, 937, 792, 509, 730, 988, 643, 424, 967, 505, 56, 903, 971, 545, 707, 835, 546, 833, 658, 661, 711, 145, 534, 625, 542, 661, 434, 701, 172, 649, 422, 495, 643, 134, 484, 624, 498, 912, 85, 861, 111, 385, 394, 840, 760, 621, 846, 151, 27, 309, 244, 901, 464, 287, 903, 963, 845, 546, 951, 833, 432, 47, 411, 289, 901, 561, 312, 790, 922, 629, 721, 377, 929, 232, 848, 23, 296, 334, 663, 237, 657, 259, 253, 463, 613, 74, 964, 40, 354, 475, 861, 423, 775, 967, 488, 492, 808, 538, 324, 543, 655, 592, 513, 481, 698, 710, 686, 595, 335, 70, 544, 287, 549, 44, 421, 326, 590, 14, 472, 892, 224, 986, 410, 838, 502, 318, 759, 112, 680, 718, 369, 28, 36, 551, 76, 920, 728, 322, 730, 283, 974, 702, 324, 359, 555, 407, 947, 617, 302, 274, 182, 106, 120, 171, 526, 828, 772, 143, 802, 428, 910, 385, 92, 477, 840, 642, 503, 313, 540, 546, 717, 291, 194, 130, 968, 936, 984, 970, 551, 96, 247, 78, 182, 131, 846, 457, 175, 154, 366, 936, 115, 779, 52, 351, 775, 232, 110, 216, 919, 954, 459, 431, 345, 814, 642, 201, 249, 541, 491, 471, 148, 403, 487, 185, 611, 429, 962, 594, 941, 741, 943, 78, 71, 782, 895, 605, 150, 162, 284, 324, 726, 363, 85, 570, 561, 569, 261, 747, 740, 604, 472, 52, 109, 815, 707, 418, 780, 555, 917, 841, 95, 373, 881, 579, 705, 424, 459, 771, 258, 577, 591, 993, 295, 913, 421, 926, 835, 15, 17, 620, 490, 916, 519, 500, 885, 58, 997, 124, 777, 338, 905, 253, 882, 51, 220, 657, 814, 606, 845, 976, 298, 883, 533, 573, 672, 674, 760, 706, 862, 209, 825, 670, 830, 713, 690, 847, 100, 406, 50, 340, 583, 311, 154, 41, 783, 566, 119, 930, 597, 326, 71, 813, 191, 868, 177, 72, 320, 62, 833, 149, 537, 613, 576, 544, 129, 811, 687, 259, 222, 359, 126, 685, 144, 881, 853, 612, 482, 778, 819, 180, 702, 73, 848, 401, 675, 283, 735, 202, 153, 196, 561, 647, 730, 173, 268, 307, 969, 870, 376, 778, 593, 500, 601, 819, 853, 194, 938, 52, 886, 954, 331, 649, 939, 674, 957, 389, 814, 623, 466, 93, 373, 283, 331, 577, 139, 187, 990, 398, 838, 295, 408, 611, 988, 556, 63, 378, 979, 412, 454, 618, 878, 580, 761, 781, 231, 799, 462, 134, 773, 151, 970, 49, 485, 509, 959, 190, 820, 805, 488, 298, 318, 514, 617, 631, 16, 232, 105, 239, 765, 930, 852, 35, 262, 103, 476, 58, 909, 787, 157, 3, 782, 594, 286, 624, 19, 738, 7, 639, 442, 649, 653, 85, 450, 348, 458, 113, 124, 680, 702, 153, 583, 459, 262, 450, 103, 303, 824, 463, 274, 790, 960, 548, 40, 659, 423, 671, 805, 830, 307, 414, 222, 847, 352, 332, 360, 837, 570, 230, 182, 863, 668, 504, 243, 884, 730, 283, 352, 241, 602, 438, 648, 13, 83, 753, 319, 225, 596, 760, 528, 761, 867, 953, 533, 966, 462, 237, 677, 737, 127, 47, 7, 609, 644, 609, 176, 912, 905, 87, 60, 537, 244, 18, 708, 81, 637, 571, 568, 13, 295, 459, 637, 305, 814, 925, 188, 521, 278, 471, 584, 496, 91, 156, 1, 986, 526, 870, 778, 564, 457, 54, 47, 800, 444, 34, 917, 204, 927, 933, 881, 41, 666, 969, 170, 294, 537, 278, 844, 307, 523, 3, 601, 81, 409, 631, 14, 720, 550, 352, 432, 280, 781, 914, 566, 903, 433, 323, 743, 439, 448, 854, 782, 288, 560, 902, 779, 699, 874, 371, 608, 493, 406, 553, 831, 362, 911, 944, 261, 169, 555, 73, 564, 751, 250, 883, 435, 131, 79, 354, 477, 284, 601, 494, 993, 111, 939, 19, 773, 158, 492, 762, 976, 569, 831, 872, 68, 714, 746, 764, 995, 682, 166, 71, 777, 504, 911, 664, 134, 831, 249, 40, 188, 221, 884, 460, 957, 824, 329, 963, 202, 300, 262, 788, 831, 306, 788, 667, 585, 133, 875, 886, 209, 958, 903, 501, 932, 458, 858, 977, 509, 148, 309, 184, 473, 570, 87, 137, 209, 39, 336, 134, 505, 120, 710, 24, 504, 137, 545, 528, 259, 799, 295, 391, 97, 876, 790, 382, 948, 451, 317, 538, 379, 918, 931, 248, 369, 545, 5, 151, 849, 342, 341, 664, 434, 10, 277, 107, 89, 144, 128, 412, 538, 89, 650, 741, 767, 186, 92, 289, 208, 33, 602, 547, 677, 575, 172, 442, 491, 736, 38, 14, 204, 891, 73, 873, 256, 213, 588, 562, 254, 193, 683, 922, 36, 8, 872, 400, 221, 270, 344, 664, 822, 854, 882, 640, 2, 119, 470, 610, 738, 488, 898, 929, 250, 269, 145, 32, 174, 454, 831, 460, 876, 822, 308, 153, 516, 24, 134, 680, 156, 842, 665, 945, 203, 393, 909, 93, 391, 866, 127, 80, 520, 567, 874, 241, 31, 996, 951, 698, 516, 940, 621, 194, 859, 256, 997, 495, 855, 274, 289, 273, 145, 371, 1000, 829, 727, 597, 496, 613, 860, 194, 689, 407, 872, 29, 824, 264, 971, 890, 915, 68, 452, 810, 429, 825, 855, 465, 392, 15, 607, 429, 712, 55, 12, 99, 908, 984, 364, 549, 101, 118, 568, 779, 578, 296, 781, 574, 15, 692, 338, 229, 989, 126, 13, 254, 77, 804, 979, 973, 264, 953, 82, 406, 199, 750, 265, 410, 250, 897, 1000, 403, 436, 938, 513, 865, 882, 993, 965, 251, 28, 704, 970, 907, 614, 766, 448, 273, 567, 170, 510, 162, 575, 617, 218, 419, 276, 330, 298, 397, 90, 394, 793, 968, 442, 990, 53, 111, 585, 239, 425, 893, 522, 522, 256, 322, 904, 866, 199, 85, 385, 848, 278, 43, 154, 115, 531, 288, 984, 910, 630, 308, 570, 49, 556, 541, 620, 462, 282, 999, 310, 813, 731, 853, 710, 521, 146, 320, 819, 596, 344, 488, 498, 737, 676, 46, 311, 437, 757, 66, 731, 18, 323, 877, 230, 207, 541, 862, 83, 200, 547, 480, 93, 7, 937, 460, 535, 717, 10, 559, 638, 117, 829, 911, 226, 151, 900, 76, 52, 8, 336, 651, 699, 126, 537, 65, 249, 800, 260, 254, 438, 455, 415, 370, 578, 143, 328, 231, 191, 575, 824, 414, 394, 749, 662, 121, 950, 797, 76, 979, 972, 368, 604, 234, 607, 691, 57, 899, 640, 472, 18, 242, 991, 714, 467, 950, 218, 400, 29, 129, 260, 406, 210, 107, 507, 231, 340, 443, 149, 394, 224, 136, 730, 135, 943, 59, 73, 339, 158, 578, 464, 916, 485, 79, 368, 841, 658, 328, 278, 869, 471, 589, 194, 269, 573, 115, 376, 861, 77, 162, 2, 637, 780, 284, 433, 902, 709, 122, 671, 762, 980, 307, 499, 118, 147, 64, 297, 232, 356, 459, 774, 12, 499, 513, 675, 966, 888, 76, 654, 802, 590, 401, 613, 698, 548, 481, 45, 237, 86, 91, 782, 71, 628, 494, 54, 819, 10, 158, 133, 515, 796, 60, 344, 733, 416, 134, 270, 509, 103, 905, 720, 627, 485, 803, 90, 209, 365, 881, 190, 767, 44, 871, 552, 131, 778, 149, 483, 800, 436, 13, 423, 470, 181, 642, 229, 888, 951, 161, 227, 625, 122, 953, 886, 660, 659, 256, 774, 464, 796, 518, 714, 301, 559, 106, 516, 705, 330, 335, 985, 997, 490, 611, 137, 20, 915, 214, 863, 27, 641, 228, 740, 354, 617, 482, 295, 791, 570, 351, 98, 56, 702, 880, 688, 691, 300, 162, 120, 314, 529, 713, 290, 714, 26, 26, 809, 134, 853, 972, 615, 806, 398, 187, 719, 916, 360, 358, 786, 426, 75, 80, 583, 610, 189, 201, 933, 174, 949, 872, 871, 28, 827, 19, 416, 23, 801, 175, 280, 370, 101, 590, 284, 720, 687, 859, 987, 910, 496, 56, 773, 556, 538, 821, 704, 81, 194, 312, 818, 229, 863, 975, 673, 591, 80, 143, 49, 924, 732, 535, 222, 837, 852, 19, 95, 438, 883, 445, 289, 187, 50, 604, 111, 416, 620, 773, 889, 603, 75, 984, 231, 117, 86, 95, 622, 162, 660, 423, 138, 210, 636, 635, 193, 680, 546, 108, 493, 640, 809, 361, 636, 524, 704, 600, 436, 645, 960, 796, 429, 281, 962, 792, 461, 207, 526, 726, 21, 904, 381, 840, 660, 451, 464, 220, 487, 762, 589, 338, 7, 402, 864, 698, 16, 405, 877, 239, 41, 682, 73, 594, 754, 784, 594, 642, 166, 722, 257, 279, 648, 390, 759, 544, 859, 79, 652, 216, 150, 925, 34, 877, 513, 289, 139, 857, 520, 793, 202, 36, 18, 122, 998, 457, 488, 822, 34, 37, 13, 25, 163, 665, 587, 678, 973, 671, 762, 494, 868, 787, 276, 848, 821, 125, 618, 552, 757, 905, 298, 165, 189, 799, 618, 489, 394, 438, 388, 500, 285, 847, 200, 188, 367, 239, 954, 878, 496, 189, 214, 920, 460, 535, 69, 969, 502, 706, 394, 517, 552, 909, 316, 597, 797, 456, 401, 326, 707, 714, 513, 109, 910, 906, 664, 83, 869, 196, 223, 633, 215, 570, 463, 850, 217, 646, 943, 717, 731, 508, 8, 496, 330, 683, 759, 542, 669, 601, 835, 405, 933, 784, 119, 727, 554, 23, 315, 725, 397, 435, 398, 443, 22, 39, 578, 205, 969, 937, 387, 826, 199, 537, 971, 556, 883, 146, 513, 540, 732, 227, 972, 323, 902, 715, 702, 912, 367, 448, 334, 215, 704, 956, 53, 276, 897, 166, 592, 545, 6, 809, 795, 33, 779, 50, 328, 748, 982, 502, 756, 165, 248, 186, 898, 409, 604, 77, 983, 915, 992, 252, 777, 372, 589, 11, 811, 11, 40, 70, 536, 175, 510, 659, 311, 477, 655, 307, 224, 955, 764, 268, 537, 826, 726, 807, 94, 353, 355, 927, 840, 236, 262, 599, 896, 355, 368, 858, 231, 483, 165, 132, 351, 610, 347, 788, 165, 591, 765, 182, 710, 222, 63, 815, 743, 858, 709, 598, 120, 359, 526, 276, 659, 231, 405, 638, 57, 844, 741, 491, 889, 411, 658, 566, 717, 849, 201, 777, 777, 910, 630, 750, 871, 662, 749, 809, 799, 737, 362, 177, 330, 169, 506, 881, 319, 260, 308, 538, 961, 136, 209, 453, 608, 270, 485, 824, 144, 513, 564, 139, 61, 504, 266, 42, 774, 739, 772, 646, 954, 368, 404, 104, 331, 745, 79, 568, 405, 525, 803, 564, 957, 245, 70, 746, 815, 799, 163, 147, 483, 301, 513, 710, 968, 773, 524, 619, 592, 659, 615, 781, 793, 55, 303, 133, 979, 570, 251, 41, 247, 19, 268, 386, 829, 335, 663, 577, 20, 344, 861, 650, 891, 653, 245, 787, 765, 408, 100, 538, 505, 725, 578, 497, 255, 633, 281, 555, 977, 542, 962, 914, 920, 822, 754, 939, 67, 514, 392, 10, 197, 224, 639, 908, 909, 637, 223, 273, 360, 496, 5, 260, 187, 356, 619, 263, 621, 520, 335, 363, 704, 243, 575, 346, 496, 83, 381, 183, 711, 439, 255, 518, 939, 998, 620, 193, 659, 810, 105, 329, 116, 891, 893, 792, 783, 437, 898, 456, 106, 710, 680, 369, 979, 8, 408, 703, 486, 78, 338, 690, 721, 549, 199, 497, 473, 302, 233, 153, 720, 593, 509, 334, 51, 709, 468, 968, 701, 760, 300, 684, 462, 801, 748, 181, 121, 372, 577, 279, 319, 375, 168, 650, 629, 614, 401, 553, 233, 847, 735, 478, 502, 12, 402, 272, 154, 867, 914, 806, 512, 610, 627, 84, 189, 618, 766, 121, 589, 11, 258, 827, 387, 448, 306, 489, 415, 43, 200, 942, 283, 132, 779, 489, 569, 383, 199, 408, 579, 265, 368, 691, 279, 457, 554, 32, 48, 573, 678, 838, 497, 115, 192, 309, 975, 908, 516, 421, 262, 321, 952, 378, 461, 896, 504, 778, 286, 591, 299, 151, 619, 432, 825, 60, 472, 185, 518, 318, 279, 944, 881, 541, 473, 30, 663, 494, 440, 842, 647, 750, 327, 245, 690, 510, 101, 151, 109, 737, 850, 53, 792, 793, 683, 846, 375, 75, 184, 581, 572, 49, 442, 461, 245, 151, 893, 550, 635, 940, 743, 499, 166, 290, 766, 995, 651, 675, 77, 463, 10, 27, 491, 219, 495, 6, 43, 444, 320, 224, 196, 182, 725, 737, 224, 724, 535, 840, 190, 702, 568, 549, 925, 802, 76, 478, 134, 14, 995, 749, 375, 122, 921, 963, 869, 613, 499, 586, 750, 327, 952, 798, 48, 81, 622, 352, 845, 313, 898, 641, 612, 211, 563, 758, 862, 558, 446, 652, 263, 589, 641, 113, 88, 274, 267, 750, 166, 762, 346, 873, 730, 609, 963, 249, 490, 449, 512, 284, 514, 299, 710, 704, 491, 885, 341, 247, 436, 100, 320, 529, 153, 473, 284, 777, 887, 632, 446, 237, 664, 797, 876, 701, 778, 404, 444, 576, 771, 239, 529, 423, 944, 1000, 858, 740, 406, 764, 497, 163, 149, 689, 297, 279, 52, 859, 752, 640, 632, 94, 985, 769, 231, 538, 529, 12, 720, 133, 926, 753, 367, 511, 817, 283, 359, 750, 162, 403, 573, 50, 815, 373, 321, 465, 831, 375, 838, 232, 81, 410, 493, 432, 535, 35, 334, 160, 539, 118, 78, 621, 740, 716, 348, 808, 538, 270, 271, 543, 68, 829, 226, 525, 197, 33, 910, 879, 207, 689, 394, 193, 17, 619, 70, 677, 876, 256, 606, 53, 307, 507, 432, 578, 65, 801, 818, 970, 528, 220, 391, 53, 916, 219, 409, 712, 359, 8, 658, 334, 994, 863, 716, 369, 796, 751, 955, 170, 829, 950, 511, 453, 46, 749, 790, 849, 213, 297, 85, 197, 321, 362, 580, 552, 582, 603, 1000, 252, 905, 743, 680, 848, 523, 847, 132, 784, 227, 832, 960, 102, 38, 667, 724, 195, 916, 309, 42, 467, 466, 555, 449, 153, 608, 757, 333, 802, 967, 848, 623, 657, 517, 965, 733, 216, 80, 569, 733, 378, 219, 314, 938, 183, 665, 336, 787, 220, 67, 607, 337, 678, 792, 979, 625, 812, 916, 205, 491, 330, 44, 457, 378, 438, 355, 144, 639, 273, 568, 759, 654, 390, 354, 167, 31, 259, 963, 213, 531, 92, 497, 302, 834, 73, 534, 272, 195, 223, 926, 269, 550, 981, 202, 718, 667, 876, 744, 27, 277, 444, 879, 835, 157, 369, 424, 172, 215, 226, 295, 393, 443, 138, 321, 663, 113, 784, 47, 232, 34, 438, 911, 981, 870, 201, 745, 189, 566, 908, 516, 231, 624, 540, 184, 151, 587, 592, 857, 1, 766, 187, 99, 21, 464, 26, 237, 119, 161, 176, 602, 396, 212, 910, 656, 440, 231, 353, 575, 248, 503, 873, 606, 496, 347, 42, 985, 424, 787, 874, 450, 725, 265, 205, 661, 501, 828, 455, 759, 913, 753, 473, 555, 230, 49, 846, 18, 468, 445, 479, 145, 311, 702, 466, 336, 974, 663, 888, 172, 752, 546, 713, 473, 93, 937, 615, 355, 504, 247, 799, 503, 309, 391, 463, 881, 21, 701, 92, 73, 63, 20, 440, 844, 421, 356, 437, 534, 794, 703, 391, 511, 999, 349, 247, 791, 500, 101, 571, 48, 932, 824, 148, 724, 229, 13, 224, 533, 835, 181, 740, 43, 951, 991, 499, 856, 490, 794, 547, 827, 599, 992, 435, 381, 321, 208, 895, 383, 475, 93, 274, 32, 931, 754, 533, 877, 830, 982, 135, 19, 628, 257, 86, 761, 270, 563, 358, 406, 809, 773, 322, 432, 773, 665, 869, 277, 190, 665, 487, 766, 489, 335, 796, 891, 61, 8, 606, 714, 211, 557, 652, 860, 447, 625, 628, 179, 768, 942, 602, 320, 961, 281, 194, 619, 17, 667, 961, 240, 844, 913, 55, 674, 149, 396, 345, 40, 857, 236, 339, 823, 481, 617, 511, 917, 6, 744, 56, 273, 421, 864, 950, 833, 231, 847, 676, 77, 325, 594, 402, 256, 990, 460, 551, 622, 538, 686, 140, 719, 295, 15, 68, 966, 949, 739, 734, 520, 66, 84, 368, 320, 974, 310, 254, 777, 543, 809, 199, 545, 510, 156, 95, 988, 732, 314, 275, 712, 543, 228, 682, 526, 606, 444, 323, 82, 115, 316, 642, 556, 186, 152, 750, 691, 864, 170, 140, 933, 354, 695, 196, 644, 477, 768, 277, 385, 524, 814, 200, 38, 60, 148, 211, 309, 361, 118, 144, 508, 519, 23, 122, 594, 880, 666, 59, 287, 463, 236, 580, 333, 193, 381, 390, 308, 685, 749, 477, 657, 578, 945, 247, 3, 448, 843, 256, 958, 583, 896, 925, 45, 462, 553, 653, 897, 641, 204, 119, 960, 163, 201, 665, 126, 651, 471, 655, 331, 379, 361, 85, 914, 284, 243, 705, 386, 728, 567, 153, 342, 64, 787, 297, 157, 523, 519, 37, 47, 19, 962, 70, 837, 402, 164, 792, 762, 746, 953, 683, 335, 58, 160, 705, 286, 115, 823, 526, 62, 356, 662, 167, 951, 801, 13, 791, 408, 925, 294, 573, 426, 944, 40, 496, 205, 135, 896, 485, 618, 166, 467, 254, 440, 925, 629, 811, 343, 259, 859, 868, 358, 630, 383, 183, 390, 375, 450, 661, 396, 321, 183, 777, 729, 19, 205, 197, 35, 954, 950, 90, 175, 448, 511, 975, 265, 865, 107, 730, 309, 83, 804, 722, 881, 230, 543, 69, 437, 840, 610, 192, 285, 558, 795, 676, 282, 110, 895, 486, 753, 567, 737, 138, 218, 161, 387, 885, 15, 738, 934, 66, 426, 198, 159, 528, 511, 495, 552, 867, 927, 497, 735, 647, 724, 109, 820, 766, 384, 519, 218, 150, 747, 573, 586, 531, 220, 657, 28, 476, 777, 351, 261, 915, 143, 661, 22, 918, 50, 197, 867, 598, 497, 607, 870, 213, 92, 205, 993, 467, 463, 917, 941, 940, 582, 630, 820, 667, 781, 613, 719, 416, 506, 206, 240, 117, 590, 568, 493, 722, 321, 554, 285, 709, 338, 367, 498, 927, 737, 713, 755, 792, 349, 279, 681, 481, 710, 473, 92, 885, 175, 1000, 136, 281, 81, 589, 447, 659, 396, 391, 455, 71, 44, 287, 853, 511, 778, 252, 411, 635, 820, 271, 433, 855, 674, 758, 321, 90, 904, 55, 419, 837, 282, 874, 278, 909, 481, 427, 900, 389, 318, 398, 88, 187, 433, 499, 599, 677, 78, 370, 56, 794, 620, 283, 371, 535, 226, 712, 157, 328, 324, 261, 623, 645, 597, 926, 832, 210, 176, 477, 390, 214, 684, 811, 294, 125, 144, 74, 73, 775, 279, 354, 729, 638, 176, 499, 289, 966, 522, 311, 719, 431, 618, 546, 52, 190, 945, 682, 577, 842, 104, 569, 199, 391, 138, 275, 25, 202, 251, 436, 753, 215, 679, 202, 465, 838, 781, 481, 993, 41, 582, 624, 813, 638, 336, 358, 936, 153, 848, 298, 64, 856, 51, 924, 666, 358, 597, 645, 169, 548, 969, 602, 375, 407, 621, 307, 755, 895, 781, 934, 644, 980, 113, 950, 103, 685, 153, 691, 776, 194, 138, 390, 465, 28, 794, 830, 987, 685, 804, 31, 577, 23, 961, 683, 125, 201, 730, 365, 13, 862, 277, 570, 613, 584, 534, 921, 286, 660, 550, 693, 868, 311, 170, 215, 281, 322, 894, 880, 421, 361, 21, 473, 578, 572, 508, 459, 259, 386, 108, 176, 374, 633, 630, 304, 757, 620, 682, 902, 873, 721, 319, 567, 283, 828, 466, 462, 922, 915, 933, 778, 235, 320, 712, 47, 114, 29, 943, 87, 228, 426, 709, 250, 581, 551, 26, 378, 623, 113, 402, 740, 763, 984, 820, 884, 175, 267, 802, 60, 651, 405, 723, 641, 609, 672, 739, 309, 829, 580, 589, 951, 698, 358, 889, 334, 376, 149, 658, 313, 848, 280, 975, 217, 637, 507, 972, 493, 446, 187, 185, 628, 221, 37, 346, 459, 302, 48, 759, 921, 471, 544, 839, 968, 406, 122, 903, 425, 739, 519, 249, 35, 766, 484, 377, 538, 109, 398, 687, 648, 320, 866, 122, 860, 622, 149, 439, 62, 382, 215, 312, 622, 931, 276, 887, 96, 530, 594, 69, 980, 16, 83, 65, 610, 542, 149, 14, 714, 714, 359, 866, 86, 915, 915, 208, 14, 406, 182, 382, 987, 580, 835, 322, 44, 839, 587, 560, 563, 503, 331, 631, 547, 88, 560, 445, 596, 605, 215, 17, 827, 445, 431, 457, 636, 361, 559, 991, 612, 333, 950, 210, 194, 284, 582, 149, 866, 801, 51, 513, 918, 660, 849, 809, 139, 500, 830, 52, 675, 390, 142, 240, 226, 78, 696, 556, 242, 866, 321, 604, 880, 805, 144, 636, 344, 110, 886, 911, 162, 323, 858, 247, 120, 63, 428, 728, 606, 612, 692, 750, 884, 239, 992, 356, 509, 339, 930, 446, 103, 124, 270, 958, 105, 632, 598, 141, 207, 555, 967, 398, 549, 144, 316, 856, 561, 737, 837, 237, 474, 859, 987, 554, 951, 623, 449, 644, 254, 201, 718, 411, 440, 35, 537, 567, 223, 195, 110, 554, 830, 106, 426, 336, 587, 170, 221, 24, 191, 480, 726, 287, 107, 776, 363, 906, 227, 747, 640, 305, 613, 454, 128, 253, 421, 754, 7, 964, 31, 415, 315, 829, 459, 225, 659, 396, 216, 436, 521, 455, 98, 161, 595, 76, 831, 307, 257, 247, 686, 499, 821, 785, 267, 157, 390, 195, 984, 798, 26, 759, 446, 636, 734, 87, 239, 353, 315, 425, 677, 483, 631, 349, 871, 931, 684, 579, 195, 599, 937, 886, 104, 227, 668, 258, 480, 988, 183, 255, 539, 400, 144, 84, 149, 593, 194, 704, 113, 756, 896, 53, 437, 137, 406, 930, 398, 176, 105, 260, 455, 420, 697, 65, 158, 230, 928, 127, 890, 29, 461, 916, 661, 943, 598, 552, 431, 776, 996, 15, 660, 311, 248, 343, 442, 962, 515, 795, 293, 548, 588, 806, 658, 250, 737, 248, 704, 99, 351, 687, 623, 538, 775, 554, 286, 910, 258, 979, 418, 828, 621, 68, 542, 862, 819, 135, 141, 454, 214, 573, 579, 541, 658, 847, 431, 109, 840, 312, 555, 308, 803, 989, 631, 453, 258, 124, 503, 773, 407, 372, 961, 862, 355, 72, 957, 661, 922, 43, 215, 453, 244, 649, 318, 117, 296, 263, 7, 81, 77, 721, 436, 576, 382, 593, 760, 646, 514, 208, 233, 396, 176, 525, 153, 535, 314, 866, 68, 367, 677, 891, 404, 669, 7, 904, 451, 176, 563, 331, 658, 984, 92, 707, 46, 814, 397, 607, 227, 552, 157, 15, 412, 910, 304, 392, 888, 723, 499, 701, 984, 618, 341]
    best_individual = np.array(best_individual, dtype=np.int32)
    valid_mask, valid_edges_count = sheet_generation.build_graph_from_individual_cpp(int(best_individual.shape[0]), best_individual, int(graph_edges.shape[0]), graph_edges, var_dict['factor_0'], var_dict['factor_not_0'], int(initial_component.shape[0]), initial_component, True)
    # build_graph_from_individual(best_individual, graph_edges, var_dict['factor_0'], var_dict['factor_not_0'], return_valid_mask=True, initial_component=var_dict['initial_component'])
    return valid_mask, valid_edges_count

def solve(graph_edges, initial_component=None, problem='k_assignment'):
    # K factors
    if problem == 'k_assignment':
        factor_0, factor_not_0 = calculate_fitness_k_factors(graph_edges)
    else:
        factor_0, factor_not_0 = 1.0, 1.0
        max_fitnes = np.sum(graph_edges[:, 3])
        print(f"Maximum possible fitness: {max_fitnes}")

    var_dict['factor_0'] = factor_0
    var_dict['factor_not_0'] = factor_not_0

    # Store the graph in raw arrays
    graph_shape = graph_edges.shape
    graph_edges_raw_array = RawArray('i', graph_shape[0] * graph_shape[1])

    # Wrap X as an numpy array so we can easily manipulates its data.
    graph_edges_raw_array_np = np.frombuffer(graph_edges_raw_array, dtype=np.int32).reshape(graph_shape)
    # Copy data to our shared array.
    np.copyto(graph_edges_raw_array_np, graph_edges)

    # Store the initial component in a shared array
    if initial_component is not None:
        initial_component_shape = initial_component.shape
        initial_component_array = RawArray('i', initial_component_shape[0]*initial_component_shape[1])
        initial_component_array_np = np.frombuffer(initial_component_array, dtype=np.int32).reshape(initial_component_shape)
        np.copyto(initial_component_array_np, initial_component)
    else:
        initial_component_array = None
        initial_component_shape = None

    # Start the process pool and do the computation.
    # Here we pass X and X_shape to the initializer of each worker.
    # (Because X_shape is not a shared variable, it will be copied to each
    # child process.)
    # max_processes = 64
    # max_processes = min(max_processes, multiprocessing.cpu_count())
    # max_processes = 4
    with Pool(initializer=init_worker, initargs=(graph_edges_raw_array, graph_shape, factor_0, factor_not_0, initial_component_array, initial_component_shape)) as pool:
        time_Start = time.time()
        toolbox, pop = init(num_items=graph_shape[0], problem=problem)

        toolbox.register("map", lambda f, x: tqdm(pool.imap(f, x), total=len(x), desc="Evaluating Individuals"))

        hof = run(toolbox, pop)

        time_End = time.time()

        best_ind = tools.selBest(pop, 1)[0]
        # print("Best individual is:", best_ind, "with fitness:", best_ind.fitness, "Time taken:", time_End - time_Start)

        # After the run, access the best individual from the Hall of Fame
        best_ind = hof[0]
        # print("Best individual ever is:", best_ind, "with fitness:", best_ind.fitness)
        best_ind = np.array(best_ind, dtype=np.int32)
        # get the valid mask
        if problem == 'k_assignment':
            print("Using C++ to build graph from individual")
            valid_mask, valid_edges_count = sheet_generation.build_graph_from_individual_cpp(int(best_ind.shape[0]), best_ind, int(graph_edges.shape[0]), graph_edges, var_dict['factor_0'], var_dict['factor_not_0'], int(initial_component.shape[0]), initial_component, True)
            print("Built graph from individual")
            # build_graph_from_individual(best_ind, graph_edges, return_valid_mask=True, initial_component=initial_component)
        else:
            # valid_mask, valid_edges_count = build_graph_from_individual_patch(best_ind, graph_edges, var_dict['factor_0'], var_dict['factor_not_0'], return_valid_mask=True)
            print("Using C++ to build subvolume respecting graph from individual")
            valid_mask, valid_edges_count = sheet_generation.build_graph_from_individual_patch_cpp(int(best_ind.shape[0]), best_ind, int(graph_edges.shape[0]), graph_edges, var_dict['factor_0'], var_dict['factor_not_0'], True)

    return valid_mask, valid_edges_count
    

if __name__ == "__main__":
    toygraph_length = NUM_ITEMS // 2
    toy_graph_edges = np.random.randint(0, toygraph_length, (NUM_ITEMS, 2))
    toy_graph_edges_k = np.random.randint(-1, 2, (NUM_ITEMS, 1))
    toy_graph = np.concatenate((toy_graph_edges, toy_graph_edges_k), axis=1).astype(np.int32)
    solve(toy_graph)
